<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Database.php" path="\Models">
    <totals>
      <lines total="38" comments="1" code="37" executable="12" executed="9" percent="75.00"/>
      <methods count="2" tested="1" percent="50.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Models\Database" start="8" executable="12" executed="9" crap="7.77">
      <namespace name="App\Models"/>
      <method name="__construct" signature="__construct()" start="12" end="30" crap="6.73" executable="11" executed="8" coverage="72.727272727273"/>
      <method name="getConnection" signature="getConnection()" start="33" end="36" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="14">
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategoryFailsWithoutName"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoriesSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoryByIdSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategoryFailsWithoutId"/>
        <covered by="Tests\Unit\CategoryModelTest::testDeleteCategorySuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\NotificationModelTest::testGetNotificationsByUserSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testMarkAsReadSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testDeleteNotificationSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskFails"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTasksByUserSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\TaskModelTest::testDeleteTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdReturnsNullIfNotFound"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUser"/>
        <covered by="Tests\Unit\UserModelTest::testPasswordVerification"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithDuplicateEmail"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithMissingFields"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmail"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmailNotFound"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithValidData"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterFailsToCreateUser"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogout"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogoutWithoutActiveSession"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginIncludesLoginView"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterIncludesRegisterView"/>
      </line>
      <line nr="16">
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategoryFailsWithoutName"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoriesSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoryByIdSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategoryFailsWithoutId"/>
        <covered by="Tests\Unit\CategoryModelTest::testDeleteCategorySuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\NotificationModelTest::testGetNotificationsByUserSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testMarkAsReadSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testDeleteNotificationSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskFails"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTasksByUserSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\TaskModelTest::testDeleteTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdReturnsNullIfNotFound"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUser"/>
        <covered by="Tests\Unit\UserModelTest::testPasswordVerification"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithDuplicateEmail"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithMissingFields"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmail"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmailNotFound"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithValidData"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterFailsToCreateUser"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogout"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogoutWithoutActiveSession"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginIncludesLoginView"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterIncludesRegisterView"/>
      </line>
      <line nr="21">
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategoryFailsWithoutName"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoriesSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoryByIdSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategoryFailsWithoutId"/>
        <covered by="Tests\Unit\CategoryModelTest::testDeleteCategorySuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\NotificationModelTest::testGetNotificationsByUserSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testMarkAsReadSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testDeleteNotificationSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskFails"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTasksByUserSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\TaskModelTest::testDeleteTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdReturnsNullIfNotFound"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUser"/>
        <covered by="Tests\Unit\UserModelTest::testPasswordVerification"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithDuplicateEmail"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithMissingFields"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmail"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmailNotFound"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithValidData"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterFailsToCreateUser"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogout"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogoutWithoutActiveSession"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginIncludesLoginView"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterIncludesRegisterView"/>
      </line>
      <line nr="22">
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategoryFailsWithoutName"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoriesSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoryByIdSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategoryFailsWithoutId"/>
        <covered by="Tests\Unit\CategoryModelTest::testDeleteCategorySuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\NotificationModelTest::testGetNotificationsByUserSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testMarkAsReadSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testDeleteNotificationSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskFails"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTasksByUserSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\TaskModelTest::testDeleteTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdReturnsNullIfNotFound"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUser"/>
        <covered by="Tests\Unit\UserModelTest::testPasswordVerification"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithDuplicateEmail"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithMissingFields"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmail"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmailNotFound"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithValidData"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterFailsToCreateUser"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogout"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogoutWithoutActiveSession"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginIncludesLoginView"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterIncludesRegisterView"/>
      </line>
      <line nr="23">
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategoryFailsWithoutName"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoriesSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoryByIdSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategoryFailsWithoutId"/>
        <covered by="Tests\Unit\CategoryModelTest::testDeleteCategorySuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\NotificationModelTest::testGetNotificationsByUserSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testMarkAsReadSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testDeleteNotificationSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskFails"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTasksByUserSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\TaskModelTest::testDeleteTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdReturnsNullIfNotFound"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUser"/>
        <covered by="Tests\Unit\UserModelTest::testPasswordVerification"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithDuplicateEmail"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithMissingFields"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmail"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmailNotFound"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithValidData"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterFailsToCreateUser"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogout"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogoutWithoutActiveSession"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginIncludesLoginView"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterIncludesRegisterView"/>
      </line>
      <line nr="24">
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategoryFailsWithoutName"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoriesSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoryByIdSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategoryFailsWithoutId"/>
        <covered by="Tests\Unit\CategoryModelTest::testDeleteCategorySuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\NotificationModelTest::testGetNotificationsByUserSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testMarkAsReadSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testDeleteNotificationSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskFails"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTasksByUserSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\TaskModelTest::testDeleteTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdReturnsNullIfNotFound"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUser"/>
        <covered by="Tests\Unit\UserModelTest::testPasswordVerification"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithDuplicateEmail"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithMissingFields"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmail"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmailNotFound"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithValidData"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterFailsToCreateUser"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogout"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogoutWithoutActiveSession"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginIncludesLoginView"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterIncludesRegisterView"/>
      </line>
      <line nr="26">
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategoryFailsWithoutName"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoriesSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoryByIdSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategoryFailsWithoutId"/>
        <covered by="Tests\Unit\CategoryModelTest::testDeleteCategorySuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\NotificationModelTest::testGetNotificationsByUserSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testMarkAsReadSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testDeleteNotificationSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskFails"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTasksByUserSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\TaskModelTest::testDeleteTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdReturnsNullIfNotFound"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUser"/>
        <covered by="Tests\Unit\UserModelTest::testPasswordVerification"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithDuplicateEmail"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithMissingFields"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmail"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmailNotFound"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithValidData"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterFailsToCreateUser"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogout"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogoutWithoutActiveSession"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginIncludesLoginView"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterIncludesRegisterView"/>
      </line>
      <line nr="35">
        <covered by="Tests\Integration\DatabaseTest::testDatabaseConnectionWithValidConfig"/>
        <covered by="Tests\Integration\DatabaseTest::testPdoErrorModeIsSetCorrectly"/>
        <covered by="Tests\Integration\DatabaseTest::testPdoAttributesAreSetCorrectly"/>
      </line>
      <line nr="25">
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testCreateCategoryFailsWithoutName"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoriesSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testGetCategoryByIdSuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategorySuccess"/>
        <covered by="Tests\Unit\CategoryModelTest::testUpdateCategoryFailsWithoutId"/>
        <covered by="Tests\Unit\CategoryModelTest::testDeleteCategorySuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testCreateNotificationFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\NotificationModelTest::testGetNotificationsByUserSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testMarkAsReadSuccess"/>
        <covered by="Tests\Unit\NotificationModelTest::testDeleteNotificationSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testCreateTaskFails"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTasksByUserSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testUpdateTaskFailsWithoutRequiredFields"/>
        <covered by="Tests\Unit\TaskModelTest::testDeleteTaskSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdSuccess"/>
        <covered by="Tests\Unit\TaskModelTest::testGetTaskByIdReturnsNullIfNotFound"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUser"/>
        <covered by="Tests\Unit\UserModelTest::testPasswordVerification"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithDuplicateEmail"/>
        <covered by="Tests\Unit\UserModelTest::testCreateUserWithMissingFields"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmail"/>
        <covered by="Tests\Unit\UserModelTest::testFindUserByEmailNotFound"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithValidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithInvalidCredentials"/>
        <covered by="Tests\Functional\AuthControllerTest::testLoginWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithValidData"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithExistingEmail"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterWithMissingFields"/>
        <covered by="Tests\Functional\AuthControllerTest::testRegisterFailsToCreateUser"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogout"/>
        <covered by="Tests\Functional\AuthControllerTest::testLogoutWithoutActiveSession"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowLoginIncludesLoginView"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterRedirectsIfAuthenticated"/>
        <covered by="Tests\Functional\AuthControllerTest::testShowRegisterIncludesRegisterView"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Models</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PDO</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PDOException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7"/>
      <line no="8">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Database</token>
      </line>
      <line no="9">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="10">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$conn</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11"/>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INCLUDE">include</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DIR">__DIR__</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/../../config/database.php'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'host'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'db'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'pass'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Invalid database configuration."</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">conn</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PDO</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">mysql:host=</token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'host'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">;dbname=</token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'db'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'user'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'pass'</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">conn</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setAttribute</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">PDO</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ATTR_ERRMODE</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PDO</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ERRMODE_EXCEPTION</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">PDOException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PDOException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Connection failed: "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// M&#xE9;todo para acceder a la conexi&#xF3;n</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getConnection</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">conn</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="37">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="38"/>
    </source>
  </file>
</phpunit>
